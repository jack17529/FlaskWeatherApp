pipeline{
    agent any
    environment{
        VERSION = "${env.BUILD_ID}"
        DOCKERHUB_CREDENTIALS = credentials('dockerhub')
    }
    stages{
        stage("docker build & docker push"){
            steps{
                sh '''
                    docker build -t ${DOCKERHUB_CREDENTIALS_USR}/weatherapp:$VERSION /var/lib/jenkins/workspace/test/
                    echo ${DOCKERHUB_CREDENTIALS_PSW} | docker login -u ${DOCKERHUB_CREDENTIALS_USR} --password-stdin
                    docker push  ${DOCKERHUB_CREDENTIALS_USR}/weatherapp:$VERSION
                '''
            }
        }
        stage('send email'){
            steps{
                mail bcc: '', body: "<br>Project: ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br> Go to build url and approve the deployment request <br> URL of the build: ${env.BUILD_URL}", cc: '', from: '', replyTo: '', subject: 'email from jenkins', to: '15ucs130@lnmiit.ac.in'
            }
        }

        stage('Deploying application on EKS cluster') {
            steps {
                withCredentials([kubeconfigFile(credentialsId: 'kubernetes-config', variable: 'KUBECONFIG')]) {
                    dir('k8s-specifications/') {
                        sh 'helm upgrade --install app-chart app-chart --set deployment.image="${DOCKERHUB_CREDENTIALS_USR}/weatherapp" --set deployment.tag="${VERSION}"' 
                    }
                }
            }
        }
    }
    post{
        always{
            sh '''
                docker rmi ${DOCKERHUB_CREDENTIALS_USR}/weatherapp:$VERSION
                docker logout 
            '''
        }
    }
}
